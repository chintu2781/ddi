# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TXom_QGfXjdgBr79VOp7Tp9_Eo37JuE0
"""

from flask import Flask, request, render_template, jsonify
import torch
import joblib
from model import DDIPredictor

app = Flask(__name__)

# Load saved models
drug_encoder = joblib.load('saved_models/drug_encoder.pkl')
interaction_encoder = joblib.load('saved_models/interaction_encoder.pkl')
num_drugs = len(drug_encoder.classes_)
num_interactions = len(interaction_encoder.categories_[0])
model = DDIPredictor(num_drug_features=num_drugs, num_interaction_types=num_interactions)
model.load_state_dict(torch.load('saved_models/ddi_model.pth'))
model.eval()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    drug1 = request.form['drug1']
    drug2 = request.form['drug2']

    try:
        drug1_id = drug_encoder.transform([drug1])[0]
        drug2_id = drug_encoder.transform([drug2])[0]

        edge_index = torch.tensor([[drug1_id], [drug2_id]], dtype=torch.long)
        x = torch.eye(num_drugs)

        with torch.no_grad():
            output = model(x, edge_index, torch.tensor([drug1_id]), torch.tensor([drug2_id]))

        prediction = output.numpy()[0]
        top3_idx = prediction.argsort()[::-1][:3]
        interactions = interaction_encoder.inverse_transform(top3_idx.reshape(-1, 1))
        probabilities = prediction[top3_idx]

        results = [{'type': i[0], 'probability': float(p)} for i, p in zip(interactions, probabilities)]
        return jsonify({'success': True, 'results': results})

    except Exception as e:
        return jsonify({'success': False, 'error': 'Drug not found or server error'})

if __name__ == '__main__':
    app.run(debug=True)